[build-system]
requires = ['setuptools', 'setuptools_scm[toml]']
build-backend = 'setuptools.build_meta'

[project]
name = "BODIUM-OGS-Coupling"
dynamic = ["version"]
description = "Coupling BODIUM and OGS via FINAM coupling framework."
authors = [{ name = 'Sara Koenig, Thomas Fischer', email = 'thomas.fischer@ufz.de' }]
license = { text = "BSD-3-Clause" }
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Scientific/Engineering :: Physics",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Topic :: Scientific/Engineering :: Visualization",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3 :: Only",
  "Operating System :: OS Independent"
]
readme = "README.md"
requires-python = '>=3.10'
dependencies = [
  "finam_ogs6",
]

[project.optional-dependencies]
dev = ["pre-commit>=2.20", "tox>=4.1", "build", "black"]
test = ["pytest", "coverage"]

[project.urls]
'Documentation' = "https://FINAM.pages.ufz.de/finam/"
'Bug Tracker' = "https://git.ufz.de/FINAM/models/bodium-ogs-coupling/-/issues"
'Source Code' = "https://git.ufz.de/FINAM/models/bodium-ogs-coupling/-/tree/main"

[tool.setuptools.packages.find]
where = ["."]
include = ["BODIUM-OGS-Coupling"]
namespaces = false

[project.scripts]


[project.optional-dependencies]
dev = ["pre-commit>=2.20", "tox>=4.1", "build", "black"]
test = ["pytest", "coverage", "gmsh"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
  "-ra",
  "--showlocals",
  "--strict-markers",
  "--strict-config",
  "--import-mode=importlib",
]
xfail_strict = true
log_cli_level = "info"
testpaths = ["tests"]

[tool.black]
line-length = 80
exclude = '.*/examples/.*'

[tool.mypy]
files = "OGS-GIScape"
exclude = ['.*/examples/.*']
strict = false
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
# Uncomment and fix one by one:
# check_untyped_defs = true
# disallow_untyped_defs = true
# disallow_incomplete_defs =  true

[tool.ruff]
select = [
  "E",
  "F",
  "W",    # flake8
  "B",
  "B904", # flake8-bugbear
  "I",    # isort
  "ARG",  # flake8-unused-arguments
  "C4",   # flake8-comprehensions
  "EM",   # flake8-errmsg
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "G",    # flake8-logging-format
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "RET",  # flake8-return
  "RUF",  # Ruff-specific
  "SIM",  # flake8-simplify
  "UP",   # pyupgrade
  "YTT",  # flake8-2020
  "EXE",  # flake8-executable
  "NPY",  # NumPy specific rules
  "PD",   # pandas-vet
]
extend-ignore = [
  "PLR",   # Design related pylint codes
  "E501",  # Line too long
  "PT004", # Use underscore for non-returning fixture (use usefixture instead)
  # RUF005 should be disabled when using numpy, see
  # https://github.com/charliermarsh/ruff/issues/2142:
  "RUF005",
  "PT009",  # can use unittest-assertion
]
target-version = "py311"
typing-modules = ["mypackage._compat.typing"]
unfixable = [

]
exclude = []
flake8-unused-arguments.ignore-variadic-names = false
line-length = 80

[tool.ruff.per-file-ignores]
"tests/**" = []

[tool.codespell]
ignore-words-list = "methode"
skip = "*.vtu"
